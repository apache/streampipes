# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

{{- if eq .Values.preferredBroker "kafka" }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.external.kafka.appName }}
spec:
  selector:
    matchLabels:
      app: {{ .Values.external.kafka.appName }}
  replicas: 1
  template:
    metadata:
      labels:
        app: {{ .Values.external.kafka.appName }}
    spec:
      restartPolicy: {{ .Values.restartPolicy }}
      initContainers:
        - name: init-wait
          image: alpine
          command: ["sh", "-c", "for i in $(seq 1 300); do nc -zvw1 {{ .Values.external.zookeeper.service.name }} {{ .Values.external.zookeeper.service.port }} && exit 0 || sleep 3; done; exit 1"]
      volumes:
        - name: {{ .Values.external.kafka.persistence.pvName }}
          persistentVolumeClaim:
            claimName: {{ .Values.external.kafka.persistence.claimName }}
      containers:
        - name: {{ .Values.external.kafka.appName }}
          image: fogsyio/kafka:{{ .Values.external.kafka.version }}
          imagePullPolicy: {{ .Values.pullPolicy }}
          ports:
            - containerPort: {{ .Values.external.kafka.port }}
          volumeMounts:
            - mountPath: "/kafka"
              name: {{ .Values.external.kafka.persistence.pvName }}
          env:
            # Known issue with kafka running in kubernetes:
            # https://github.com/wurstmeister/kafka-docker/issues/122
            - name: KAFKA_PORT
              value: "{{ .Values.external.kafka.port }}"
            - name: KAFKA_ZOOKEEPER_CONNECT
              value: "zookeeper:{{ .Values.external.zookeeper.port }}"
            - name: KAFKA_LISTENERS
              value: "PLAINTEXT://:{{ .Values.external.kafka.port }},OUTSIDE://:9094"
            - name: KAFKA_ADVERTISED_LISTENERS
              value: "PLAINTEXT://kafka:{{ .Values.external.kafka.port }},OUTSIDE://{{ .Values.external.kafka.external.hostname }}:9094"
            - name: KAFKA_INTER_BROKER_LISTENER_NAME
              value: "PLAINTEXT"
            - name: KAFKA_LISTENER_SECURITY_PROTOCOL_MAP
              value: "PLAINTEXT:PLAINTEXT,OUTSIDE:PLAINTEXT"
            - name: KAFKA_MESSAGE_MAX_BYTES
              value: "5000012"
            - name: KAFKA_FETCH_MESSAGE_MAX_BYTES
              value: "5000012"
            - name: KAFKA_REPLICA_FETCH_MAX_BYTES
              value: "10000000"
          livenessProbe:
            tcpSocket:
              port: {{ .Values.external.kafka.port }}
            initialDelaySeconds: {{ .Values.initialDelaySeconds }}
            periodSeconds: {{ .Values.periodSeconds }}
            failureThreshold: {{ .Values.failureThreshold }}
          readinessProbe:
            tcpSocket:
              port: {{ .Values.external.kafka.port }}
            initialDelaySeconds: {{ .Values.initialDelaySeconds }}
            periodSeconds: {{ .Values.periodSeconds }}
            failureThreshold: {{ .Values.failureThreshold }}
          startupProbe:
            tcpSocket:
              port: {{ .Values.external.kafka.port }}
            initialDelaySeconds: {{ .Values.initialDelaySeconds }}
            periodSeconds: {{ .Values.periodSeconds }}
            failureThreshold: {{ .Values.failureThreshold }}
{{- end }}